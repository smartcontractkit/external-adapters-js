{
  "address": "eUSXyKoZ6aGejYVbnp3wtWQ1E8zuokLAJPecPxxtgG3",
  "metadata": {
    "name": "yield_vault",
    "version": "1.1.1",
    "spec": "0.1.0",
    "description": "YieldVault"
  },
  "instructions": [
    {
      "name": "confirm_authority_transfer",
      "docs": [
        "Confirm the authority transfer for the controller.",
        "Only the controller.authority can call this instruction.",
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        ""
      ],
      "discriminator": [191, 70, 42, 162, 189, 10, 15, 247],
      "accounts": [
        {
          "name": "authority",
          "docs": ["#1 Authored call accessible only to the signer matching Controller.authority"],
          "signer": true,
          "relations": ["controller"]
        },
        {
          "name": "payer",
          "docs": ["#2 Payer of the transaction"],
          "writable": true,
          "signer": true
        },
        {
          "name": "controller",
          "docs": ["#3 Top level Controller account managing the program"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 78, 84, 82, 79, 76, 76, 69, 82]
              }
            ]
          }
        },
        {
          "name": "proposed_new_authority",
          "docs": ["#4 Address of the proposed new authority to be confirmed"],
          "relations": ["controller"]
        }
      ],
      "args": []
    },
    {
      "name": "edit_controller",
      "docs": [
        "Edit the controller of the Yield Program.",
        "Only the controller.authority can call this instruction.",
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        "* `fields` - The fields to be edited.",
        "* `fields.vesting_period_in_seconds` - The yield vesting period in seconds.",
        "* `fields.cooldown_period_in_seconds` - The unlock withdraw cooldown period in seconds.",
        "* `fields.fast_cooldown_cutoff` - The fast cooldown cutoff.",
        "* `fields.fast_cooldown_period_in_seconds` - The fast cooldown period in seconds.",
        ""
      ],
      "discriminator": [132, 153, 227, 60, 132, 180, 226, 209],
      "accounts": [
        {
          "name": "authority",
          "docs": ["#1 Authored call accessible only to the signer matching Controller.authority"],
          "signer": true,
          "relations": ["controller"]
        },
        {
          "name": "payer",
          "docs": ["#2 Payer of the transaction"],
          "writable": true,
          "signer": true
        },
        {
          "name": "controller",
          "docs": ["#3 Top level Controller account managing the program"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 78, 84, 82, 79, 76, 76, 69, 82]
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "fields",
          "type": {
            "defined": {
              "name": "EditControllerFields"
            }
          }
        }
      ]
    },
    {
      "name": "edit_metadata",
      "docs": [
        "Edit the metadata for eUSX mint.",
        "Only the controller.authority can call this instruction.",
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        "* `fields` - The fields to be edited.",
        "* `fields.name` - The name of the eUSX mint.",
        "* `fields.symbol` - The symbol of the eUSX mint.",
        "* `fields.uri` - The URI of the eUSX mint metadata."
      ],
      "discriminator": [178, 218, 211, 66, 85, 42, 99, 45],
      "accounts": [
        {
          "name": "authority",
          "docs": ["#1 Authored call accessible only to the signer matching Controller.authority"],
          "signer": true,
          "relations": ["controller"]
        },
        {
          "name": "payer",
          "docs": ["#2 Payer of the transaction"],
          "writable": true,
          "signer": true
        },
        {
          "name": "controller",
          "docs": ["#3 Top level Controller account managing the program"],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 78, 84, 82, 79, 76, 76, 69, 82]
              }
            ]
          }
        },
        {
          "name": "metadata",
          "docs": ["#4 metadata account"],
          "writable": true
        },
        {
          "name": "token_metadata_program",
          "docs": ["#5 Token Metadata Program"],
          "address": "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
        }
      ],
      "args": [
        {
          "name": "fields",
          "type": {
            "defined": {
              "name": "EditMetadataFields"
            }
          }
        }
      ]
    },
    {
      "name": "edit_permissioned_account",
      "docs": [
        "Edit the permissioned account's permissions.",
        "Only the controller.authority can call this instruction.",
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        "* `fields` - The fields to be edited.",
        "* `fields.can_send_yield` - harvester",
        ""
      ],
      "discriminator": [74, 199, 98, 183, 46, 196, 224, 210],
      "accounts": [
        {
          "name": "authority",
          "docs": ["#1 Authored call accessible only to the signer matching Controller.authority"],
          "signer": true,
          "relations": ["controller"]
        },
        {
          "name": "payer",
          "docs": ["#2 Payer of the transaction"],
          "writable": true,
          "signer": true
        },
        {
          "name": "controller",
          "docs": ["#3 Top level Controller account managing the program"],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 78, 84, 82, 79, 76, 76, 69, 82]
              }
            ]
          }
        },
        {
          "name": "permissioned_party",
          "docs": ["#4 Address of the permissioned party"]
        },
        {
          "name": "permissioned_account",
          "docs": ["#5 Permissioned account to edit"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  80, 69, 82, 77, 73, 83, 83, 73, 79, 78, 69, 68, 95, 65, 67, 67, 79, 85, 78, 84
                ]
              },
              {
                "kind": "account",
                "path": "permissioned_party"
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "fields",
          "type": {
            "defined": {
              "name": "EditPermissionFields"
            }
          }
        }
      ]
    },
    {
      "name": "edit_program_freeze_status",
      "docs": [
        "Freeze or unfreeze the program.",
        "Only the controller.authority can call this instruction.",
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        "* `is_frozen` - The freeze status of the program.",
        ""
      ],
      "discriminator": [29, 202, 0, 135, 36, 221, 162, 73],
      "accounts": [
        {
          "name": "authority",
          "docs": ["#1 Authored call accessible only to the signer matching Controller.authority"],
          "signer": true,
          "relations": ["controller"]
        },
        {
          "name": "payer",
          "docs": ["#2 Payer of the transaction"],
          "writable": true,
          "signer": true
        },
        {
          "name": "controller",
          "docs": ["#3 Top level Controller account managing the program"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 78, 84, 82, 79, 76, 76, 69, 82]
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "is_frozen",
          "type": "bool"
        }
      ]
    },
    {
      "name": "initialize_authority_transfer",
      "docs": [
        "Initialize the authority transfer for the controller.",
        "Only the controller.authority can call this instruction.",
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        ""
      ],
      "discriminator": [60, 146, 106, 171, 144, 253, 153, 35],
      "accounts": [
        {
          "name": "authority",
          "docs": ["#1 Authored call accessible only to the signer matching Controller.authority"],
          "signer": true,
          "relations": ["controller"]
        },
        {
          "name": "payer",
          "docs": ["#2 Payer of the transaction"],
          "writable": true,
          "signer": true
        },
        {
          "name": "controller",
          "docs": ["#3 Top level Controller account managing the program"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 78, 84, 82, 79, 76, 76, 69, 82]
              }
            ]
          }
        },
        {
          "name": "proposed_new_authority",
          "docs": ["#4 Address of the proposed new authority"]
        }
      ],
      "args": []
    },
    {
      "name": "initialize_controller",
      "docs": [
        "Initialize the controller of the Yield Program.",
        "This should be called immediately after the program is deployed.",
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        "* `fields` - The fields to be initialized.",
        "* `fields.mint_decimals` - The eUSX mint decimals.",
        "* `fields.vesting_period_in_seconds` - The yield vesting period in seconds.",
        "* `fields.cooldown_period_in_seconds` - The unlock withdraw cooldown period in seconds.",
        "* `fields.fast_cooldown_cutoff` - The fast cooldown cutoff.",
        "* `fields.fast_cooldown_period_in_seconds` - The fast cooldown period in seconds.",
        ""
      ],
      "discriminator": [137, 255, 100, 190, 201, 247, 241, 81],
      "accounts": [
        {
          "name": "authority",
          "docs": ["#1 Authored call accessible only to the signer matching authorized address."],
          "signer": true
        },
        {
          "name": "payer",
          "docs": ["#2 Payer of the transaction"],
          "writable": true,
          "signer": true
        },
        {
          "name": "controller",
          "docs": ["#3 Top level Controller account managing the program"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 78, 84, 82, 79, 76, 76, 69, 82]
              }
            ]
          }
        },
        {
          "name": "share_mint",
          "docs": [
            "#4 The eUSX mint managed by the Controller account, controlled by the controller"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [83, 72, 65, 82, 69, 95, 77, 73, 78, 84]
              }
            ]
          }
        },
        {
          "name": "system_program",
          "docs": ["#5 System program, required for account creation"],
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "token_program",
          "docs": ["#6 Token program, required for mint creation"],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        }
      ],
      "args": [
        {
          "name": "fields",
          "type": {
            "defined": {
              "name": "InitControllerFields"
            }
          }
        }
      ]
    },
    {
      "name": "initialize_metadata",
      "docs": [
        "Initialize the metadata for eUSX mint.",
        "Only the controller.authority can call this instruction.",
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        "* `fields` - The fields to be initialized.",
        "* `fields.name` - The name of the eUSX mint.",
        "* `fields.symbol` - The symbol of the eUSX mint.",
        "* `fields.uri` - The URI of the eUSX mint metadata."
      ],
      "discriminator": [35, 215, 241, 156, 122, 208, 206, 212],
      "accounts": [
        {
          "name": "authority",
          "docs": ["#1 Authored call accessible only to the signer matching Controller.authority"],
          "signer": true,
          "relations": ["controller"]
        },
        {
          "name": "payer",
          "docs": ["#2 Payer of the transaction"],
          "writable": true,
          "signer": true
        },
        {
          "name": "controller",
          "docs": ["#3 Top level Controller account managing the program"],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 78, 84, 82, 79, 76, 76, 69, 82]
              }
            ]
          }
        },
        {
          "name": "share_mint",
          "docs": ["#4 eUSX mint"],
          "writable": true,
          "relations": ["controller"]
        },
        {
          "name": "metadata",
          "docs": ["#5 metadata account"],
          "writable": true
        },
        {
          "name": "token_metadata_program",
          "docs": ["#6 Token Metadata Program"],
          "address": "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "fields",
          "type": {
            "defined": {
              "name": "InitMetadataFields"
            }
          }
        }
      ]
    },
    {
      "name": "initialize_permissioned_account",
      "docs": [
        "Initialize the permissioned account to store permissions.",
        "Only the controller.authority can call this instruction.",
        "",
        "The permissioned account PDA is derived from the permissioned party, and stores the",
        "permitted actions for the permissioned party.",
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        "* `permissions` - The permission fields for the permissioned account.",
        "* `permissions.can_send_yield` - harvester",
        ""
      ],
      "discriminator": [183, 7, 55, 76, 75, 68, 182, 46],
      "accounts": [
        {
          "name": "authority",
          "docs": ["#1 Authored call accessible only to the signer matching Controller.authority"],
          "signer": true,
          "relations": ["controller"]
        },
        {
          "name": "payer",
          "docs": ["#2 Payer of the transaction"],
          "writable": true,
          "signer": true
        },
        {
          "name": "controller",
          "docs": ["#3 Top level Controller account managing the program"],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 78, 84, 82, 79, 76, 76, 69, 82]
              }
            ]
          }
        },
        {
          "name": "permissioned_party",
          "docs": ["#4 Address of the permissioned party"]
        },
        {
          "name": "permissioned_account",
          "docs": ["#5 Permissioned account with a PDA derived from permissioned_party"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  80, 69, 82, 77, 73, 83, 83, 73, 79, 78, 69, 68, 95, 65, 67, 67, 79, 85, 78, 84
                ]
              },
              {
                "kind": "account",
                "path": "permissioned_party"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "docs": ["#6 System program, required for account creation"],
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "permissions",
          "type": {
            "defined": {
              "name": "InitPermissionFields"
            }
          }
        }
      ]
    },
    {
      "name": "initialize_vesting_schedule",
      "docs": [
        "Initialize the vesting schedule for controlling the vesting of yield.",
        "Only the controller.authority can call this instruction.",
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        ""
      ],
      "discriminator": [138, 203, 174, 154, 16, 126, 177, 27],
      "accounts": [
        {
          "name": "authority",
          "docs": ["#1 Authored call accessible only to the signer matching Controller.authority"],
          "signer": true,
          "relations": ["controller"]
        },
        {
          "name": "payer",
          "docs": ["#2 Payer of the transaction"],
          "writable": true,
          "signer": true
        },
        {
          "name": "controller",
          "docs": ["#3 Top level Controller account managing the program"],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 78, 84, 82, 79, 76, 76, 69, 82]
              }
            ]
          }
        },
        {
          "name": "vesting_schedule",
          "docs": ["#4 Vesting schedule account managing yield vesting"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [86, 69, 83, 84, 73, 78, 71, 95, 83, 67, 72, 69, 68, 85, 76, 69]
              }
            ]
          }
        },
        {
          "name": "system_program",
          "docs": ["#5 System program, required for account creation"],
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": []
    },
    {
      "name": "initialize_yield_pool",
      "docs": [
        "Initialize the yield pool for keeping track of the yield pool accounting.",
        "Only the controller.authority can call this instruction.",
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        ""
      ],
      "discriminator": [32, 7, 57, 189, 201, 125, 93, 149],
      "accounts": [
        {
          "name": "authority",
          "docs": ["#1 Authored call accessible only to the signer matching Controller.authority"],
          "signer": true,
          "relations": ["controller"]
        },
        {
          "name": "payer",
          "docs": ["#2 Payer of the transaction"],
          "writable": true,
          "signer": true
        },
        {
          "name": "controller",
          "docs": ["#3 Top level Controller account managing the program"],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 78, 84, 82, 79, 76, 76, 69, 82]
              }
            ]
          }
        },
        {
          "name": "yield_pool",
          "docs": ["#4 yield pool account keeping track of accounting"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [89, 73, 69, 76, 68, 95, 80, 79, 79, 76]
              }
            ]
          }
        },
        {
          "name": "asset_vault",
          "docs": ["#5 The vault where the USX assets are locked, controlled by the controller"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [65, 83, 83, 69, 84, 95, 86, 65, 85, 76, 84]
              }
            ]
          }
        },
        {
          "name": "asset_mint",
          "docs": ["#6 The USX mint"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [82, 69, 68, 69, 69, 77, 65, 66, 76, 69]
              }
            ]
          }
        },
        {
          "name": "system_program",
          "docs": ["#7 System program, required for account creation"],
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "token_program",
          "docs": ["#8 Token program, required for token account creation"],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        }
      ],
      "args": []
    },
    {
      "name": "lock",
      "docs": [
        "Lock the USX assets and receive eUSX shares.",
        "This is a permissionless instruction.",
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        "* `asset_amount` - The amount of USX to be locked.",
        ""
      ],
      "discriminator": [21, 19, 208, 43, 237, 62, 255, 87],
      "accounts": [
        {
          "name": "user",
          "docs": ["#1 Lock assets into the yield pool"],
          "writable": true,
          "signer": true
        },
        {
          "name": "payer",
          "docs": ["#2 Payer of the transaction"],
          "writable": true,
          "signer": true
        },
        {
          "name": "controller",
          "docs": ["#3 Top level Controller account managing the program"],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 78, 84, 82, 79, 76, 76, 69, 82]
              }
            ]
          }
        },
        {
          "name": "vesting_schedule",
          "docs": ["#4 Vesting schedule account managing yield vesting"],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [86, 69, 83, 84, 73, 78, 71, 95, 83, 67, 72, 69, 68, 85, 76, 69]
              }
            ]
          }
        },
        {
          "name": "share_mint",
          "docs": ["#5 eUSX mint, checked by the controller"],
          "writable": true,
          "relations": ["controller"]
        },
        {
          "name": "user_shares",
          "docs": ["#6 User's eUSX token account, mint and owner checked"],
          "writable": true
        },
        {
          "name": "asset_mint",
          "docs": ["#7 User's USX mint, checked by the yield pool"],
          "relations": ["yield_pool"]
        },
        {
          "name": "asset_vault",
          "docs": ["#8 Yield program's USX vault"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [65, 83, 83, 69, 84, 95, 86, 65, 85, 76, 84]
              }
            ]
          }
        },
        {
          "name": "yield_pool",
          "docs": ["#9 Yield pool account managing accounting"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [89, 73, 69, 76, 68, 95, 80, 79, 79, 76]
              }
            ]
          }
        },
        {
          "name": "user_assets",
          "docs": ["#10 User's USX token account, mint and owner checked"],
          "writable": true
        },
        {
          "name": "token_program",
          "docs": ["#11 Token program, required for token transfers"],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        }
      ],
      "args": [
        {
          "name": "asset_amount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "transfer_in_yield",
      "docs": [
        "Transfer in yield which starts a new round of yield vesting.",
        "Only a permissioned account can call this instruction.",
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        "* `asset_amount` - The amount of USX to be transferred in.",
        ""
      ],
      "discriminator": [41, 24, 250, 54, 30, 135, 145, 59],
      "accounts": [
        {
          "name": "harvester",
          "docs": ["#1 Harvester is a permissioned party, checked by permissioned account"],
          "signer": true
        },
        {
          "name": "payer",
          "docs": ["#2 Payer of the transaction"],
          "writable": true,
          "signer": true
        },
        {
          "name": "permissioned_account",
          "docs": ["#3 Permissioned account bound to the harvester"],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  80, 69, 82, 77, 73, 83, 83, 73, 79, 78, 69, 68, 95, 65, 67, 67, 79, 85, 78, 84
                ]
              },
              {
                "kind": "account",
                "path": "harvester"
              }
            ]
          }
        },
        {
          "name": "controller",
          "docs": ["#4 Top level Controller account managing the program"],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 78, 84, 82, 79, 76, 76, 69, 82]
              }
            ]
          }
        },
        {
          "name": "vesting_schedule",
          "docs": ["#5 Vesting schedule account managing yield vesting"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [86, 69, 83, 84, 73, 78, 71, 95, 83, 67, 72, 69, 68, 85, 76, 69]
              }
            ]
          }
        },
        {
          "name": "harvester_assets",
          "docs": ["#6 Harvester's USX account, owner and mint checked"],
          "writable": true
        },
        {
          "name": "asset_mint",
          "docs": ["#7 USX mint, checked by the yield pool"],
          "relations": ["yield_pool"]
        },
        {
          "name": "asset_vault",
          "docs": ["#8 Yield program's USX vault"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [65, 83, 83, 69, 84, 95, 86, 65, 85, 76, 84]
              }
            ]
          }
        },
        {
          "name": "yield_pool",
          "docs": ["#9 Yield pool account managing accounting"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [89, 73, 69, 76, 68, 95, 80, 79, 79, 76]
              }
            ]
          }
        },
        {
          "name": "token_program",
          "docs": ["#10 Token program, required for token transfers"],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        }
      ],
      "args": [
        {
          "name": "asset_amount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "unlock",
      "docs": [
        "Unlock the eUSX shares and receive USX assets.",
        "The USX assets are locked in a cooldown escrow for a period of time.",
        "This is a permissionless instruction.",
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        "* `share_amount` - The amount of eUSX shares to be unlocked.",
        ""
      ],
      "discriminator": [101, 155, 40, 21, 158, 189, 56, 203],
      "accounts": [
        {
          "name": "user",
          "docs": ["#1 Unlock assets from the yield pool"],
          "signer": true
        },
        {
          "name": "payer",
          "docs": ["#2 Payer of the transaction"],
          "writable": true,
          "signer": true
        },
        {
          "name": "controller",
          "docs": ["#3 Top level Controller account managing the program"],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 78, 84, 82, 79, 76, 76, 69, 82]
              }
            ]
          }
        },
        {
          "name": "vesting_schedule",
          "docs": ["#4 Vesting schedule account managing yield vesting"],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [86, 69, 83, 84, 73, 78, 71, 95, 83, 67, 72, 69, 68, 85, 76, 69]
              }
            ]
          }
        },
        {
          "name": "share_mint",
          "docs": ["#5 The eUSX mint, checked by the controller"],
          "writable": true,
          "relations": ["controller"]
        },
        {
          "name": "user_shares",
          "docs": ["#6 User's eUSX token account, mint and owner checked"],
          "writable": true
        },
        {
          "name": "asset_mint",
          "docs": ["#7 The USX mint, checked by the yield pool"],
          "relations": ["yield_pool"]
        },
        {
          "name": "asset_vault",
          "docs": ["#8 Yield program's USX vault"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [65, 83, 83, 69, 84, 95, 86, 65, 85, 76, 84]
              }
            ]
          }
        },
        {
          "name": "yield_pool",
          "docs": ["#9 Yield pool account keeping track of accounting"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [89, 73, 69, 76, 68, 95, 80, 79, 79, 76]
              }
            ]
          }
        },
        {
          "name": "cooldown_escrow",
          "docs": ["#10 Escrow account with a PDA derived from the user"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 79, 76, 68, 79, 87, 78, 95, 69, 83, 67, 82, 79, 87]
              },
              {
                "kind": "account",
                "path": "user"
              }
            ]
          }
        },
        {
          "name": "cooldown_escrow_vault",
          "docs": ["#11 USX account to keep the assets during cooldown, controlled by the PDA"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67, 79, 79, 76, 68, 79, 87, 78, 95, 69, 83, 67, 82, 79, 87, 95, 86, 65, 85, 76, 84
                ]
              },
              {
                "kind": "account",
                "path": "user"
              }
            ]
          }
        },
        {
          "name": "token_program",
          "docs": ["#12 Token program, required for token transfers"],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "system_program",
          "docs": ["#13 System program, required for account creation"],
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "share_amount",
          "type": "u64"
        }
      ]
    },
    {
      "name": "withdraw",
      "docs": [
        "Withdraw all the USX assets from the cooldown escrow after the cooldown period.",
        "This is a permissionless instruction.",
        "# Arguments",
        "",
        "* `ctx`- The accounts needed by instruction.",
        ""
      ],
      "discriminator": [183, 18, 70, 156, 148, 109, 161, 34],
      "accounts": [
        {
          "name": "user",
          "docs": ["#1 Withdraw assets from the cooldown escrow"],
          "signer": true
        },
        {
          "name": "payer",
          "docs": ["#2 Payer of the transaction"],
          "writable": true,
          "signer": true
        },
        {
          "name": "controller",
          "docs": ["#3 Top level Controller account managing the program"],
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 78, 84, 82, 79, 76, 76, 69, 82]
              }
            ]
          }
        },
        {
          "name": "asset_mint",
          "docs": ["#4 The USX mint, checked by the cooldown escrow"],
          "relations": ["cooldown_escrow"]
        },
        {
          "name": "user_assets",
          "docs": ["#5 User's USX token account, mint and owner checked"],
          "writable": true
        },
        {
          "name": "cooldown_escrow",
          "docs": ["#6 Cooldown escrow bound to the user"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [67, 79, 79, 76, 68, 79, 87, 78, 95, 69, 83, 67, 82, 79, 87]
              },
              {
                "kind": "account",
                "path": "user"
              }
            ]
          }
        },
        {
          "name": "cooldown_escrow_vault",
          "docs": ["#7 Cooldown escrow vault bound to the user"],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  67, 79, 79, 76, 68, 79, 87, 78, 95, 69, 83, 67, 82, 79, 87, 95, 86, 65, 85, 76, 84
                ]
              },
              {
                "kind": "account",
                "path": "user"
              }
            ]
          }
        },
        {
          "name": "token_program",
          "docs": ["#8 Token program, required for token transfers"],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        }
      ],
      "args": []
    }
  ],
  "accounts": [
    {
      "name": "Controller",
      "discriminator": [184, 79, 171, 0, 183, 43, 113, 110]
    },
    {
      "name": "CooldownEscrow",
      "discriminator": [33, 77, 148, 155, 188, 243, 149, 148]
    },
    {
      "name": "PermissionedAccount",
      "discriminator": [155, 189, 86, 246, 89, 218, 143, 27]
    },
    {
      "name": "VestingSchedule",
      "discriminator": [130, 200, 173, 148, 39, 75, 243, 147]
    },
    {
      "name": "YieldPool",
      "discriminator": [118, 216, 37, 206, 197, 189, 27, 100]
    }
  ],
  "events": [
    {
      "name": "ConfirmAuthorityTransferEvent",
      "discriminator": [239, 178, 28, 126, 49, 50, 91, 183]
    },
    {
      "name": "EditControllerEvent",
      "discriminator": [142, 25, 132, 229, 111, 235, 12, 243]
    },
    {
      "name": "EditPermissionedAccountEvent",
      "discriminator": [41, 159, 239, 106, 42, 187, 200, 213]
    },
    {
      "name": "EditProgramFreezeStatusEvent",
      "discriminator": [176, 199, 3, 156, 140, 222, 29, 202]
    },
    {
      "name": "InitializeAuthorityTransferEvent",
      "discriminator": [87, 106, 217, 74, 230, 245, 115, 76]
    },
    {
      "name": "InitializeControllerEvent",
      "discriminator": [236, 159, 123, 225, 71, 177, 241, 0]
    },
    {
      "name": "InitializePermissionedAccountEvent",
      "discriminator": [47, 169, 103, 2, 140, 230, 127, 66]
    },
    {
      "name": "InitializeVestingScheduleEvent",
      "discriminator": [198, 11, 6, 102, 65, 217, 35, 114]
    },
    {
      "name": "InitializeYieldPoolEvent",
      "discriminator": [199, 241, 74, 40, 88, 142, 251, 195]
    },
    {
      "name": "LockEvent",
      "discriminator": [76, 37, 6, 186, 14, 42, 253, 15]
    },
    {
      "name": "TransferInYieldEvent",
      "discriminator": [29, 47, 92, 217, 235, 180, 239, 175]
    },
    {
      "name": "UnlockEvent",
      "discriminator": [105, 1, 235, 144, 68, 123, 75, 123]
    },
    {
      "name": "WithdrawEvent",
      "discriminator": [22, 9, 133, 26, 160, 44, 71, 192]
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "ProgramFrozen",
      "msg": "The program is currently in Frozen state."
    },
    {
      "code": 6001,
      "name": "InvalidMintDecimals",
      "msg": "The provided mint decimals is invalid."
    },
    {
      "code": 6002,
      "name": "InvalidVestingPeriod",
      "msg": "The provided vesting period is invalid."
    },
    {
      "code": 6003,
      "name": "InvalidCooldownPeriod",
      "msg": "The provided cooldown period is invalid."
    },
    {
      "code": 6004,
      "name": "ProgramFreezeStatusUnchanged",
      "msg": "Invalid freeze status change: program is already in this status."
    },
    {
      "code": 6005,
      "name": "LastVestingNotEnded",
      "msg": "Last vesting has not ended yet"
    },
    {
      "code": 6006,
      "name": "InvalidCurrentBlockTime",
      "msg": "Current block time is invalid"
    },
    {
      "code": 6007,
      "name": "InvalidOwner",
      "msg": "The provided token account is not owner by the expected party."
    },
    {
      "code": 6008,
      "name": "InvalidAuthority",
      "msg": "Only the Program authority can access this instruction."
    },
    {
      "code": 6009,
      "name": "InvalidPermissions",
      "msg": "Permissions must be provided."
    },
    {
      "code": 6010,
      "name": "InvalidPermissionRights",
      "msg": "Account does not have permission to perform the operation."
    },
    {
      "code": 6011,
      "name": "InvalidAssetMint",
      "msg": "The provided asset mint is invalid"
    },
    {
      "code": 6012,
      "name": "InvalidShareMint",
      "msg": "The provided share mint is invalid"
    },
    {
      "code": 6013,
      "name": "CooldownNotEnded",
      "msg": "The cooldown period is not ended yet."
    },
    {
      "code": 6014,
      "name": "InvalidAmount",
      "msg": "The amount cannot be 0"
    },
    {
      "code": 6015,
      "name": "InsufficientFunds",
      "msg": "The balance of the provided account is not enough to fulfill the operation."
    },
    {
      "code": 6016,
      "name": "MathError",
      "msg": "Math error."
    },
    {
      "code": 6017,
      "name": "ZeroShareAmount",
      "msg": "Cannot mint zero share."
    },
    {
      "code": 6018,
      "name": "InvalidAuthorityTransfer",
      "msg": "Invalid authority transfer request."
    }
  ],
  "types": [
    {
      "name": "ConfirmAuthorityTransferEvent",
      "docs": ["Event called in [instructions::confirm_authority_transfer::handler]."],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "controller",
            "docs": ["The controller."],
            "type": "pubkey"
          },
          {
            "name": "new_authority",
            "docs": ["The new authority."],
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "Controller",
      "serialization": "bytemuck",
      "repr": {
        "kind": "c",
        "packed": true
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "type": "pubkey"
          },
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "share_mint",
            "type": "pubkey"
          },
          {
            "name": "share_mint_decimals",
            "type": "u8"
          },
          {
            "name": "vesting_period_in_seconds",
            "type": "u64"
          },
          {
            "name": "cooldown_period_in_seconds",
            "type": "u64"
          },
          {
            "name": "proposed_new_authority",
            "type": "pubkey"
          },
          {
            "name": "has_proposed_authority",
            "type": "u8"
          },
          {
            "name": "is_frozen",
            "type": "u8"
          },
          {
            "name": "fast_cooldown_cutoff",
            "type": "u64"
          },
          {
            "name": "fast_cooldown_period_in_seconds",
            "type": "u64"
          },
          {
            "name": "_reserved",
            "type": {
              "array": ["u8", 112]
            }
          }
        ]
      }
    },
    {
      "name": "CooldownEscrow",
      "serialization": "bytemuck",
      "repr": {
        "kind": "c",
        "packed": true
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "user",
            "type": "pubkey"
          },
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "asset_mint",
            "type": "pubkey"
          },
          {
            "name": "asset_amount",
            "type": "u64"
          },
          {
            "name": "cooldown_end",
            "type": "u64"
          },
          {
            "name": "_reserved",
            "type": {
              "array": ["u8", 128]
            }
          }
        ]
      }
    },
    {
      "name": "EditControllerEvent",
      "docs": ["Event called in [instructions::edit_controller::handler]."],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "controller",
            "docs": ["The controller."],
            "type": "pubkey"
          },
          {
            "name": "vesting_period_in_seconds",
            "docs": ["The new vesting period in seconds."],
            "type": "u64"
          },
          {
            "name": "cooldown_period_in_seconds",
            "docs": ["The new cooldown period in seconds."],
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "EditControllerFields",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "vesting_period_in_seconds",
            "type": {
              "option": "u64"
            }
          },
          {
            "name": "cooldown_period_in_seconds",
            "type": {
              "option": "u64"
            }
          },
          {
            "name": "fast_cooldown_cutoff",
            "type": {
              "option": "u64"
            }
          },
          {
            "name": "fast_cooldown_period_in_seconds",
            "type": {
              "option": "u64"
            }
          }
        ]
      }
    },
    {
      "name": "EditMetadataFields",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "symbol",
            "type": "string"
          },
          {
            "name": "uri",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "EditPermissionFields",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "can_send_yield",
            "type": {
              "option": "bool"
            }
          }
        ]
      }
    },
    {
      "name": "EditPermissionedAccountEvent",
      "docs": ["Event called in [instructions::edit_permissioned_account::handler]."],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "controller",
            "docs": ["The controller."],
            "type": "pubkey"
          },
          {
            "name": "permissioned_party",
            "docs": ["The permissioned party."],
            "type": "pubkey"
          },
          {
            "name": "permissioned_account",
            "docs": ["The permissioned account PDA."],
            "type": "pubkey"
          },
          {
            "name": "can_send_yield",
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "EditProgramFreezeStatusEvent",
      "docs": ["Event called in [instructions::edit_program_freeze_status::handler]."],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "controller",
            "docs": ["The controller."],
            "type": "pubkey"
          },
          {
            "name": "is_frozen",
            "docs": ["The freeze status."],
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "InitControllerFields",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "mint_decimals",
            "type": "u8"
          },
          {
            "name": "vesting_period_in_seconds",
            "type": "u64"
          },
          {
            "name": "cooldown_period_in_seconds",
            "type": "u64"
          },
          {
            "name": "fast_cooldown_cutoff",
            "type": "u64"
          },
          {
            "name": "fast_cooldown_period_in_seconds",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "InitMetadataFields",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "symbol",
            "type": "string"
          },
          {
            "name": "uri",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "InitPermissionFields",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "can_send_yield",
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "InitializeAuthorityTransferEvent",
      "docs": ["Event called in [instructions::initialize_authority_transfer::handler]."],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "controller",
            "docs": ["The controller."],
            "type": "pubkey"
          },
          {
            "name": "new_authority",
            "docs": ["The new authority."],
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "InitializeControllerEvent",
      "docs": ["Event called in [instructions::initialize_controller::handler]."],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "controller",
            "docs": ["The controller being created."],
            "type": "pubkey"
          },
          {
            "name": "authority",
            "docs": ["The authority."],
            "type": "pubkey"
          },
          {
            "name": "share_mint",
            "docs": ["The shares mint."],
            "type": "pubkey"
          },
          {
            "name": "share_mint_decimals",
            "docs": ["The shares mint decimals."],
            "type": "u8"
          },
          {
            "name": "vesting_period_in_seconds",
            "docs": ["The vesting period in seconds."],
            "type": "u64"
          },
          {
            "name": "cooldown_period_in_seconds",
            "docs": ["The cooldown period in seconds."],
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "InitializePermissionedAccountEvent",
      "docs": ["Event called in [instructions::initialize_permissioned_account::handler]."],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "controller",
            "docs": ["The controller."],
            "type": "pubkey"
          },
          {
            "name": "permissioned_party",
            "docs": ["The permissioned party."],
            "type": "pubkey"
          },
          {
            "name": "permissioned_account",
            "docs": ["The permissioned account PDA."],
            "type": "pubkey"
          },
          {
            "name": "can_send_yield",
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "InitializeVestingScheduleEvent",
      "docs": ["Event called in [instructions::initialize_vesting_schedule::handler]."],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "controller",
            "docs": ["The controller."],
            "type": "pubkey"
          },
          {
            "name": "vesting_schedule",
            "docs": ["The vesting schedule."],
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "InitializeYieldPoolEvent",
      "docs": ["Event called in [instructions::initialize_yield_pool::handler]."],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "controller",
            "docs": ["The controller."],
            "type": "pubkey"
          },
          {
            "name": "yield_pool",
            "docs": ["The yield pool."],
            "type": "pubkey"
          },
          {
            "name": "asset_vault",
            "docs": ["The asset vault initialized."],
            "type": "pubkey"
          },
          {
            "name": "asset_mint",
            "docs": ["The asset mint."],
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "LockEvent",
      "docs": ["Event called in [instructions::lock::handler]."],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "controller",
            "docs": ["The controller."],
            "type": "pubkey"
          },
          {
            "name": "yield_pool",
            "docs": ["The yield pool."],
            "type": "pubkey"
          },
          {
            "name": "user",
            "docs": ["The user account."],
            "type": "pubkey"
          },
          {
            "name": "asset_amount",
            "docs": ["The amount of assets locked."],
            "type": "u64"
          },
          {
            "name": "share_amount",
            "docs": ["The amount of shares minted."],
            "type": "u64"
          },
          {
            "name": "unvested_amount",
            "docs": ["Unvested asset amount."],
            "type": "u64"
          },
          {
            "name": "total_assets_before",
            "docs": [
              "Total assets in the yield pool before the lock.",
              "This includes the unvested yield which cannot be claimed."
            ],
            "type": "u128"
          },
          {
            "name": "shares_supply_before",
            "docs": ["Shares supply before the lock."],
            "type": "u128"
          },
          {
            "name": "total_assets_after",
            "docs": ["total assets in the yield pool after the lock."],
            "type": "u128"
          },
          {
            "name": "shares_supply_after",
            "docs": ["Shares supply after the lock."],
            "type": "u128"
          }
        ]
      }
    },
    {
      "name": "PermissionedAccount",
      "serialization": "bytemuck",
      "repr": {
        "kind": "c",
        "packed": true
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "can_send_yield",
            "type": "u8"
          },
          {
            "name": "_reserved",
            "type": {
              "array": ["u8", 128]
            }
          }
        ]
      }
    },
    {
      "name": "TransferInYieldEvent",
      "docs": ["Event called in [instructions::transfer_in_yield::handler]."],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "controller",
            "docs": ["The controller."],
            "type": "pubkey"
          },
          {
            "name": "yield_pool",
            "docs": ["The yield pool."],
            "type": "pubkey"
          },
          {
            "name": "harvester",
            "docs": ["The harvester."],
            "type": "pubkey"
          },
          {
            "name": "asset_amount",
            "docs": ["The amount of assets transferred."],
            "type": "u64"
          },
          {
            "name": "total_assets_before",
            "docs": ["Total assets in the yield pool before the transfer."],
            "type": "u128"
          },
          {
            "name": "total_assets_after",
            "docs": ["Total assets in the yield pool after the transfer."],
            "type": "u128"
          },
          {
            "name": "vesting_start_time",
            "docs": ["Vesting start time."],
            "type": "u64"
          },
          {
            "name": "vesting_end_time",
            "docs": ["Vesting end time."],
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "UnlockEvent",
      "docs": ["Event called in [instructions::unlock::handler]."],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "controller",
            "docs": ["The controller."],
            "type": "pubkey"
          },
          {
            "name": "yield_pool",
            "docs": ["The yield pool."],
            "type": "pubkey"
          },
          {
            "name": "user",
            "docs": ["The user account."],
            "type": "pubkey"
          },
          {
            "name": "asset_amount",
            "docs": ["The amount of assets unlocked."],
            "type": "u64"
          },
          {
            "name": "share_amount",
            "docs": ["The amount of shares burned."],
            "type": "u64"
          },
          {
            "name": "unvested_amount",
            "docs": ["Unvested assets amount."],
            "type": "u64"
          },
          {
            "name": "total_assets_before",
            "docs": ["Total assets in the yield pool before the unlock."],
            "type": "u128"
          },
          {
            "name": "shares_supply_before",
            "docs": ["Shares supply before the unlock."],
            "type": "u128"
          },
          {
            "name": "total_assets_after",
            "docs": ["total assets in the yield pool after the unlock."],
            "type": "u128"
          },
          {
            "name": "shares_supply_after",
            "docs": ["Shares supply after the unlock."],
            "type": "u128"
          },
          {
            "name": "cooldown_escrow_asset_amount",
            "docs": ["The assets amount in the cooldown escrow."],
            "type": "u64"
          },
          {
            "name": "cooldown_end",
            "docs": ["The cooldown end time."],
            "type": "u64"
          },
          {
            "name": "is_init_needed",
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "VestingSchedule",
      "serialization": "bytemuck",
      "repr": {
        "kind": "c",
        "packed": true
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "vesting_amount",
            "type": "u64"
          },
          {
            "name": "start_time",
            "type": "u64"
          },
          {
            "name": "end_time",
            "type": "u64"
          },
          {
            "name": "_reserved",
            "type": {
              "array": ["u8", 128]
            }
          }
        ]
      }
    },
    {
      "name": "WithdrawEvent",
      "docs": ["Event called in [instructions::withdraw::handler]."],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "controller",
            "docs": ["The controller."],
            "type": "pubkey"
          },
          {
            "name": "user",
            "docs": ["The user account."],
            "type": "pubkey"
          },
          {
            "name": "asset_amount",
            "docs": ["The amount of assets withdrawn."],
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "YieldPool",
      "serialization": "bytemuck",
      "repr": {
        "kind": "c",
        "packed": true
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "asset_mint",
            "type": "pubkey"
          },
          {
            "name": "asset_mint_decimals",
            "type": "u8"
          },
          {
            "name": "asset_vault",
            "type": "pubkey"
          },
          {
            "name": "asset_vault_bump",
            "type": "u8"
          },
          {
            "name": "total_assets",
            "type": "u128"
          },
          {
            "name": "shares_supply",
            "type": "u128"
          },
          {
            "name": "_reserved",
            "type": {
              "array": ["u8", 512]
            }
          }
        ]
      }
    }
  ],
  "constants": [
    {
      "name": "ASSET_VAULT_NAMESPACE",
      "type": "bytes",
      "value": "[65, 83, 83, 69, 84, 95, 86, 65, 85, 76, 84]"
    },
    {
      "name": "CONTROLLER_NAMESPACE",
      "type": "bytes",
      "value": "[67, 79, 78, 84, 82, 79, 76, 76, 69, 82]"
    },
    {
      "name": "COOLDOWN_ESCROW_NAMESPACE",
      "type": "bytes",
      "value": "[67, 79, 79, 76, 68, 79, 87, 78, 95, 69, 83, 67, 82, 79, 87]"
    },
    {
      "name": "COOLDOWN_ESCROW_VAULT_NAMESPACE",
      "type": "bytes",
      "value": "[67, 79, 79, 76, 68, 79, 87, 78, 95, 69, 83, 67, 82, 79, 87, 95, 86, 65, 85, 76, 84]"
    },
    {
      "name": "PERMISSIONED_ACCOUNT_NAMESPACE",
      "type": "bytes",
      "value": "[80, 69, 82, 77, 73, 83, 83, 73, 79, 78, 69, 68, 95, 65, 67, 67, 79, 85, 78, 84]"
    },
    {
      "name": "SHARE_MINT_NAMESPACE",
      "type": "bytes",
      "value": "[83, 72, 65, 82, 69, 95, 77, 73, 78, 84]"
    },
    {
      "name": "USX_REDEEMABLE_MINT_NAMESPACE",
      "type": "bytes",
      "value": "[82, 69, 68, 69, 69, 77, 65, 66, 76, 69]"
    },
    {
      "name": "VESTING_SCHEDULE_NAMESPACE",
      "type": "bytes",
      "value": "[86, 69, 83, 84, 73, 78, 71, 95, 83, 67, 72, 69, 68, 85, 76, 69]"
    },
    {
      "name": "YIELD_POOL_NAMESPACE",
      "type": "bytes",
      "value": "[89, 73, 69, 76, 68, 95, 80, 79, 79, 76]"
    }
  ]
}
