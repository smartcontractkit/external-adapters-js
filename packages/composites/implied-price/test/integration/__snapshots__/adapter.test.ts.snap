// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`impliedPrice erroring calls returns error if dividend has zero price 1`] = `
{
  "error": {
    "feedID": "{"data":{"dividendSources":["coingecko","coinpaprika"],"divisorSources":["coingecko","coinpaprika"],"dividendInput":{"from":"DEAD","to":"USD"},"divisorInput":{"from":"ETH","to":"USD"}}}",
    "message": "Dividend result is zero",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 500,
}
`;

exports[`impliedPrice erroring calls returns error if divisor has zero price 1`] = `
{
  "error": {
    "feedID": "{"data":{"dividendSources":["coingecko","coinpaprika"],"divisorSources":["coingecko","coinpaprika"],"dividendInput":{"from":"LINK","to":"USD"},"divisorInput":{"from":"DEAD","to":"USD"}}}",
    "message": "Divisor result is zero",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 500,
}
`;

exports[`impliedPrice erroring calls returns error if not reaching minAnswers 1`] = `
{
  "error": {
    "feedID": "{"data":{"dividendSources":["coingecko"],"dividendMinAnswers":2,"divisorSources":["coingecko"],"dividendInput":{"from":"LINK","to":"USD"},"divisorInput":{"from":"ETH","to":"USD"}}}",
    "message": "Not returning median: got 1 answers, requiring min. 2 answers",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 500,
}
`;

exports[`impliedPrice successful calls with dividend and divisor parameters return success without comma separated sources 1`] = `
{
  "data": {
    "result": "0.0038975944001909025829",
  },
  "jobRunID": "1",
  "providerStatusCode": 200,
  "result": "0.0038975944001909025829",
  "statusCode": 200,
}
`;

exports[`impliedPrice successful calls with dividend and divisor parameters returns success with comma separated sources 1`] = `
{
  "data": {
    "result": "0.0038975944001909025829",
  },
  "jobRunID": "1",
  "providerStatusCode": 200,
  "result": "0.0038975944001909025829",
  "statusCode": 200,
}
`;

exports[`impliedPrice successful calls with operand1 and operand2 parameters can multiply operands 1`] = `
{
  "data": {
    "result": "75462.5725",
  },
  "jobRunID": "1",
  "providerStatusCode": 200,
  "result": "75462.5725",
  "statusCode": 200,
}
`;

exports[`impliedPrice successful calls with operand1 and operand2 parameters return success without comma separated sources 1`] = `
{
  "data": {
    "result": "0.0038975944001909025829",
  },
  "jobRunID": "1",
  "providerStatusCode": 200,
  "result": "0.0038975944001909025829",
  "statusCode": 200,
}
`;

exports[`impliedPrice successful calls with operand1 and operand2 parameters returns success with comma separated sources 1`] = `
{
  "data": {
    "result": "0.0038975944001909025829",
  },
  "jobRunID": "1",
  "providerStatusCode": 200,
  "result": "0.0038975944001909025829",
  "statusCode": 200,
}
`;

exports[`impliedPrice validation error returns a validation error if additional dividend parameters are given 1`] = `
{
  "error": {
    "feedID": "{"data":{"operand1Sources":["coingecko","coinpaprika"],"dividendSources":["coingecko","coinpaprika"],"operand2Sources":["coingecko","coinpaprika"],"operand1Input":{"from":"LINK","to":"USD"},"operand2Input":{"from":"ETH","to":"USD"},"operation":"divide"}}",
    "message": "Must use only dividend/divisor parameters or only operand1/operand2 parameters",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 400,
}
`;

exports[`impliedPrice validation error returns a validation error if additional operand parameters are given 1`] = `
{
  "error": {
    "feedID": "{"data":{"dividendSources":["coingecko","coinpaprika"],"divisorSources":["coingecko","coinpaprika"],"operand1Sources":["coingecko","coinpaprika"],"dividendInput":{"from":"LINK","to":"USD"},"divisorInput":{"from":"ETH","to":"USD"}}}",
    "message": "Must use only dividend/divisor parameters or only operand1/operand2 parameters",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 400,
}
`;

exports[`impliedPrice validation error returns a validation error if dividendInput is missing 1`] = `
{
  "error": {
    "feedID": "{"data":{"dividendSources":["coingecko","coinpaprika"],"divisorSources":["coingecko","coinpaprika"],"divisorInput":{"from":"ETH","to":"USD"}}}",
    "message": "Must specify all required dividend/divisor parameters: dividendSources, dividendInput, divisorSources, divisorInput",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 400,
}
`;

exports[`impliedPrice validation error returns a validation error if dividendSources are missing 1`] = `
{
  "error": {
    "feedID": "{"data":{"divisorSources":["coingecko","coinpaprika"],"dividendInput":{"from":"LINK","to":"USD"},"divisorInput":{"from":"ETH","to":"USD"}}}",
    "message": "Must specify all required dividend/divisor parameters: dividendSources, dividendInput, divisorSources, divisorInput",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 400,
}
`;

exports[`impliedPrice validation error returns a validation error if divisorInput is missing 1`] = `
{
  "error": {
    "feedID": "{"data":{"dividendSources":["coingecko","coinpaprika"],"divisorSources":["coingecko","coinpaprika"],"dividendInput":{"from":"LINK","to":"USD"}}}",
    "message": "Must specify all required dividend/divisor parameters: dividendSources, dividendInput, divisorSources, divisorInput",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 400,
}
`;

exports[`impliedPrice validation error returns a validation error if divisorSources are missing 1`] = `
{
  "error": {
    "feedID": "{"data":{"dividendSources":["coingecko","coinpaprika"],"dividendInput":{"from":"LINK","to":"USD"},"divisorInput":{"from":"ETH","to":"USD"}}}",
    "message": "Must specify all required dividend/divisor parameters: dividendSources, dividendInput, divisorSources, divisorInput",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 400,
}
`;

exports[`impliedPrice validation error returns a validation error if operand1Input is missing 1`] = `
{
  "error": {
    "feedID": "{"data":{"operand1Sources":["coingecko","coinpaprika"],"operand2Sources":["coingecko","coinpaprika"],"operand2Input":{"from":"ETH","to":"USD"},"operation":"divide"}}",
    "message": "Must specify all required operand1/operand2 parameters: operand1Sources, operand1Input, operand2Sources, operand2Input, operation",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 400,
}
`;

exports[`impliedPrice validation error returns a validation error if operand1Sources are missing 1`] = `
{
  "error": {
    "feedID": "{"data":{"operand2Sources":["coingecko","coinpaprika"],"operand1Input":{"from":"LINK","to":"USD"},"operand2Input":{"from":"ETH","to":"USD"},"operation":"divide"}}",
    "message": "Must specify all required operand1/operand2 parameters: operand1Sources, operand1Input, operand2Sources, operand2Input, operation",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 400,
}
`;

exports[`impliedPrice validation error returns a validation error if operand2Input is missing 1`] = `
{
  "error": {
    "feedID": "{"data":{"operand1Sources":["coingecko","coinpaprika"],"operand2Sources":["coingecko","coinpaprika"],"operand1Input":{"from":"LINK","to":"USD"},"operation":"divide"}}",
    "message": "Must specify all required operand1/operand2 parameters: operand1Sources, operand1Input, operand2Sources, operand2Input, operation",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 400,
}
`;

exports[`impliedPrice validation error returns a validation error if operand2Sources are missing 1`] = `
{
  "error": {
    "feedID": "{"data":{"operand1Sources":["coingecko","coinpaprika"],"operand1Input":{"from":"LINK","to":"USD"},"operand2Input":{"from":"ETH","to":"USD"},"operation":"divide"}}",
    "message": "Must specify all required operand1/operand2 parameters: operand1Sources, operand1Input, operand2Sources, operand2Input, operation",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 400,
}
`;

exports[`impliedPrice validation error returns a validation error if operation is missing 1`] = `
{
  "error": {
    "feedID": "{"data":{"operand1Sources":["coingecko","coinpaprika"],"operand2Sources":["coingecko","coinpaprika"],"operand1Input":{"from":"LINK","to":"USD"},"operand2Input":{"from":"ETH","to":"USD"}}}",
    "message": "Must specify all required operand1/operand2 parameters: operand1Sources, operand1Input, operand2Sources, operand2Input, operation",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 400,
}
`;

exports[`impliedPrice validation error returns a validation error if operation is used with dividend and divisor 1`] = `
{
  "error": {
    "feedID": "{"data":{"dividendSources":["coingecko","coinpaprika"],"divisorSources":["coingecko","coinpaprika"],"dividendInput":{"from":"LINK","to":"USD"},"divisorInput":{"from":"ETH","to":"USD"},"operation":"divide"}}",
    "message": "Must use only dividend/divisor parameters or only operand1/operand2 parameters",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 400,
}
`;

exports[`impliedPrice validation error returns a validation error if parameters are mixed 1`] = `
{
  "error": {
    "feedID": "{"data":{"dividendSources":["coingecko","coinpaprika"],"operand2Sources":["coingecko","coinpaprika"],"dividendInput":{"from":"LINK","to":"USD"},"operand2Input":{"from":"ETH","to":"USD"}}}",
    "message": "Must use only dividend/divisor parameters or only operand1/operand2 parameters",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 400,
}
`;

exports[`impliedPrice validation error returns a validation error if the request contains unsupported sources 1`] = `
{
  "error": {
    "feedID": "{"data":{"dividendSources":["NOT_REAL"],"divisorSources":["coingecko"],"dividendInput":{"from":"LINK","to":"USD"},"divisorInput":{"from":"ETH","to":"USD"}}}",
    "message": "Please set the required env NOT_REAL_ADAPTER_URL.",
    "name": "RequiredEnvError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 500,
}
`;

exports[`impliedPrice validation error returns a validation error if the request data is empty 1`] = `
{
  "error": {
    "feedID": "{"data":{}}",
    "message": "Must specify required dividend/divisor or required operand1/operand2 parameters",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 400,
}
`;

exports[`impliedPrice validation error returns a validation error if the request is missing dividend input 1`] = `
{
  "error": {
    "feedID": "{"data":{"dividendSources":["coingecko"],"divisorSources":["coingecko"],"divisorInput":{"from":"ETH","to":"USD"}}}",
    "message": "dividendInput parameter must be an object with at least one property",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 400,
}
`;

exports[`impliedPrice validation error returns a validation error if the request is missing divisor input 1`] = `
{
  "error": {
    "feedID": "{"data":{"dividendSources":["coingecko"],"divisorSources":["coingecko"],"dividendInput":{"from":"LINK","to":"USD"}}}",
    "message": "divisorInput parameter must be an object with at least one property",
    "name": "AdapterError",
  },
  "jobRunID": "1",
  "status": "errored",
  "statusCode": 400,
}
`;
