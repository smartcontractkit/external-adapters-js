# This action acts as a signal dispatcher that fires whenever the release process has
# successfully completed. The listening workflow within the infra-k8s repository has
# a corresponding event handler to generate releases based on this signal
name: Deploy

on:
  # TODO: turn back to push
  # push:
  #   branches:
  #     - main
  pull_request:
    branches:
      - pipelines-refactor

concurrency:
  group: deploy
  cancel-in-progress: false

jobs:
  calculate-changes:
    name: Compute changed adapters
    runs-on: [self-hosted, sdlc-ghr-prod]
    outputs:
      adapter-list: ${{ steps.changed-adapters.outputs.CHANGED_ADAPTERS }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Set up and install dependencies
        uses: ./.github/actions/setup
        with:
          skip-setup: true
      - name: Build list of changed packages and changed adapters
        id: changed-adapters
        env:
          UPSTREAM_BRANCH: HEAD~1
        run: |
          yarn changeset version
          git commit -am "Mock changesets"
          ./.github/scripts/changed-adapters.sh

  publish-adapter-images:
    name: Build ${{ matrix.adapter.shortName }}
    runs-on: [self-hosted, sdlc-ghr-prod]
    needs:
      - calculate-changes
    environment: release
    permissions: # These are needed for the configure-aws-credentials action
      id-token: write
      contents: read
    strategy:
      matrix: ${{fromJson(needs.calculate-changes.outputs.adapter-list)}}
    env:
      IMAGE_TAG: ${{ secrets.SDLC_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION_ECR_PRIVATE }}.amazonaws.com/adapters/${{ matrix.adapter.shortName }}-adapter:${{ matrix.adapter.version }}
      IMAGE_PREFIX: ${{ secrets.SDLC_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION_ECR_PRIVATE }}.amazonaws.com/adapters
      PRIVATE_ECR_ACCOUNT_IDS: ${{ secrets.AWS_PRIVATE_ECR_SECONDARY_ACCOUNT_ACCESS_IDS }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build cache the installer stage of the main image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ env.IMAGE_TAG }}
          build-args: |
            package=${{ matrix.adapter.name }}
            location=${{ matrix.adapter.location }}
      - name: Configure AWS Credentials for SDLC Private ECR
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION_ECR_PRIVATE }}
      - name: Authenticate to ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION_ECR_PRIVATE }} | docker login --username AWS --password-stdin ${{ env.IMAGE_PREFIX }}/
      # - name: Create a ECR repository if does not exist
      #   run: aws ecr create-repository --region ${{ secrets.AWS_REGION_ECR_PRIVATE }} --repository-name adapters/${{ matrix.adapter.shortName }} || true
      # - name: Set ECR repository permissions for secondary account access on private ECR repos
      #   run: >
      #     aws ecr set-repository-policy
      #     --region ${{ secrets.AWS_REGION_ECR_PUBLIC }}
      #     --repository-name adapters/${{ matrix.adapter.shortName }}
      #     --policy-text "$(jq '.Statement[0].Principal.AWS |= [$PRIVATE_ECR_ACCOUNT_IDS]' .github/actions/release/publish-artifacts/secondary-account-access-policy.json)" &> /dev/null;
      # - name: Push to ECR
      #   run: |
      #     docker push $IMAGE_PREFIX/${{ matrix.adapter.shortName }}:pr-${{ github.event.pull_request.number }}

  deploy:
    name: Trigger infra deployment
    runs-on: ubuntu-latest
    needs: publish-adapter-images
    environment: InfraK8s
    steps:
      - name: Debug
        run: echo 'test'
      # - name: 'Trigger Image Dispatcher'
      #   run: gh workflow run --repo smartcontractkit/infra-k8s --ref main "Infra-k8s Image Dispatcher" -F imageRepos="${{ steps.get-artifacts.outputs.result }}" -F gitRepo=${{ github.event.repository.name }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.INFRA_K8s_PAT }}
