name: Actions

on:
  push:
    branches:
      - master
  pull_request: ~

env:
  cache-name: main-ci

jobs:
  packages:
    name: Verify dependency package archives
    runs-on: [self-hosted, sdlc-ghr-prod]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - name: Install Yarn
        run: npm install -g yarn
      - name: Re-download dependencies & verify checksum
        run: yarn install --check-cache

  run-basic-checks:
    name: Run linters and unit tests
    runs-on: [self-hosted, sdlc-ghr-prod]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - name: Install Yarn
        run: npm install -g yarn
      - run: yarn install
      - run: yarn setup
      - run: yarn lint
      - run: yarn test unit

  # Read build strategy matrix of adapters, from a json file
  matrix-adapters:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.result }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - name: Generate job matrix
        id: create-matrix
        run: yarn generate:gha:matrix

  publish-grafana:
    runs-on: ubuntu-latest
    name: Publish grafana boards
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.13.1' # The Go version to download (if necessary) and use.
      - name: Install jsonnet bundler
        run: GO111MODULE="on" go get github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb
      - name: Install grizzly
        run: curl -fSL -o "grr" "https://github.com/grafana/grizzly/releases/download/v0.1.0/grr-linux-amd64" && chmod a+x "grr"
      - run: cd grafana
      - name: Setup preview with an hour expiry
        run: ./grr preview -e 3600 ./dashboard.jsonnet > output.txt
        env:
          GRAFANA_URL: ${{ secrets.GRAFANA_URL }}
          GRAFANA_TOKEN: ${{ secrets.GRAFANA_TOKEN }}
      - name: Set env
        run: echo "OUTPUT=$(cat output.txt)" >> $GITHUB_ENV
      - uses: actions/github-script@v3
        env:
          output: ${{ env.OUTPUT }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.OUTPUT
            })

  build-adapters:
    needs: [run-basic-checks, matrix-adapters]
    name: (${{ matrix.adapter.type }}) Build ${{matrix.adapter.name}} adapter
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.matrix-adapters.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - name: Install yarn deps
        run: yarn
      - name: Generate docker-compose file
        run: yarn generate:docker-compose
      - run: docker-compose -f docker-compose.generated.yaml build ${{ matrix.adapter.name }}
