name: Soak test

on:
  pull_request: ~
  #TODO remove the following 3 lines
  push:
    branches:
      - 'feature/soak-testing'

jobs:
  run-basic-checks:
    name: Run Soak Tests Against Changed Adapters
    runs-on: ubuntu-latest
    environment: QA
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.QA_SDLC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.QA_SDLC_AWS_SECRET_KEY }}
          aws-region: ${{ secrets.QA_SDLC_AWS_REGION }}
          role-to-assume: ${{ secrets.QA_SDLC_AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 3600

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Kubernetes Context
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.QA_SDLC_KUBECONFIG }}

      - name: Setup Node 17.x
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
      - name: Install Yarn and setup project
        run: |
          npm install -g yarn
          yarn install
          yarn setup
      - name: Install SOPS
        run: |
          TEMP_DEB="temp-sops-v3.7.1.linux" &&
          wget -O "$TEMP_DEB" https://github.com/mozilla/sops/releases/download/v3.7.1/sops-v3.7.1.linux &&
          sudo dpkg -i "$TEMP_DEB" &&
          rm -f "$TEMP_DEB"

      - name: Checkout external-adapters-js repo
        uses: actions/checkout@v2
        with:
          path: external-adapters-js

      - name: Find current PR
        uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          # Can be "open", "closed", or "all".  Defaults to "open".
          state: all

      - name: Install Yarn and setup project
        working-directory: ./external-adapters-js
        run: |
          npm install -g yarn
          yarn install
          yarn setup

      - name: Install SOPS
        run: |
          TEMP_DEB="temp-sops_3.7.1_amd64.deb" &&
          wget -O "$TEMP_DEB" https://github.com/mozilla/sops/releases/download/v3.7.1/sops_3.7.1_amd64.deb &&
          sudo dpkg -i "$TEMP_DEB" &&
          rm -f "$TEMP_DEB"

      - name: Use GH CLI to get pr info
        working-directory: ./external-adapters-js
        id: get-pr-info
        env:
          GITHUB_TOKEN: ${{ secrets.QA_GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.findPr.outputs.pr }}
        run: |
          set -x
          # TODO uncomment these lines
          # CHANGED_FILES_NAME=./changedFiles.txt
          # gh pr view ${PR_NUMBER} --json files --jq '.files.[].path' > ${CHANGED_FILES_NAME}
          # ADAPTERS_LIST="$(yarn get-changed-adapters "${CHANGED_FILES_NAME}")"
          ADAPTERS_LIST="coingecko coinpaprika"
          # export adapters from this step
          echo "::set-output name=ADAPTERS_LIST::${ADAPTERS_LIST}"

      - name: Remove adapters that have no fluxconfig
        working-directory: ./external-adapters-js
        id: adapters-list
        env:
          ADAPTER_NAMES: ${{ steps.get-pr-info.outputs.ADAPTERS_LIST }}
        run: |
          set -x
          ADAPTERS_LIST=
          for adapter in ${ADAPTER_NAMES}; do
            echo "${adapter}"
            DONT_ADD=0
            yarn qa:flux:configure exists ${adapter} blank || DONT_ADD=1
            if [ $DONT_ADD = '1' ]; then
              continue
            fi
            ADAPTERS_LIST="${ADAPTERS_LIST} ${adapter}"
          done
          ADAPTERS_LIST="$(echo ${ADAPTERS_LIST} | xargs)"
          # export adapters from this step
          echo "::set-output name=ADAPTERS_LIST::${ADAPTERS_LIST}"

      - name: Build adapters
        working-directory: ./external-adapters-js
        env:
          PR_NUMBER: ${{ steps.findPr.outputs.pr }}
          ADAPTER_NAMES: ${{ steps.adapters-list.outputs.ADAPTERS_LIST }}
          IMAGE_PREFIX: ${{ secrets.SDLC_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/adapters/
        run: |
          IMAGE_TAG=pr${PR_NUMBER}
          IMAGE_TAG=${IMAGE_TAG}
          IMAGE_PREFIX=${IMAGE_PREFIX}
          yarn generate:docker-compose
          ls -al
          BUILD_NAMES=
          echo $BUILD_NAMES
          if [ -n "$ADAPTER_NAMES" ]; then
            for adapter in ${ADAPTER_NAMES}; do
              BUILD_NAMES="${BUILD_NAMES} ${adapter}-adapter"
            done
            echo $BUILD_NAMES
            docker-compose -f docker-compose.generated.yaml build ${BUILD_NAMES}
            for adapter in ${ADAPTER_NAMES}; do
              docker push ${IMAGE_PREFIX}${adapter}-adapter:${IMAGE_TAG}
            done
          fi

      - name: Clone infra-k8s repo
        env:
          GITHUB_TOKEN: ${{ secrets.QA_GITHUB_TOKEN }}
        run: git clone https://${GITHUB_TOKEN}@github.com/smartcontractkit/infra-k8s.git

      - name: Deploy adapters
        working-directory: ./external-adapters-js
        env:
          PR_NUMBER: ${{ steps.findPr.outputs.pr }}
          ADAPTER_NAMES: ${{ steps.adapters-list.outputs.ADAPTERS_LIST }}
          IMAGE_PREFIX: ${{ secrets.SDLC_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/adapters/
          GITHUB_TOKEN: ${{ secrets.QA_GITHUB_TOKEN }}
        run: |
          IMAGE_TAG=pr${PR_NUMBER}
          # pull down the chainlink adapter helm chart
          helm repo add chainlink https://raw.githubusercontent.com/smartcontractkit/charts/gh-pages/ --password ${GITHUB_TOKEN} --username dummy
          # deploy all the adapters
          # TODO Set HELM_VALUES = yaml file with envVars: ... for extra creds (converted from envSecrets in decrypted file)
          if [ -n "$ADAPTER_NAMES" ]; then
            for adapter in ${ADAPTER_NAMES}; do
              cd ../infra-k8s
              echo ${sops -d apps/files/adapters/${adapter}/secrets-develop.yaml}
              cd ../external-adapters-js
              yarn qa:adapter start ${adapter} ${PR_NUMBER} ${IMAGE_TAG}
            done
          fi

      - name: Build the k6 payloads and images
        env:
          PR_NUMBER: ${{ steps.findPr.outputs.pr }}
          ADAPTER_NAMES: ${{ steps.adapters-list.outputs.ADAPTERS_LIST }}
          IMAGE_PREFIX: ${{ secrets.SDLC_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/k6
        run: |
          IMAGE_TAG=pr${PR_NUMBER}
          OUTER_DIR=$(pwd)
          if [ -n "$ADAPTER_NAMES" ]; then
            for adapter in ${ADAPTER_NAMES}; do
              cd ${OUTER_DIR}
              # create the config
              yarn qa:flux:configure k6payload ${adapter} ${PR_NUMBER}
              # Move to the k6 package and build/push
              cd ./packages/k6
              # configure docker env
              echo "" >> ./.env
              echo "PAYLOAD_GENERATED=true" >> ./.env
              echo "CI_ADAPTER_NAME=${adapter}" >> ./.env
              echo "QA_RELEASE_TAG=${PR_NUMBER}" >> ./.env
              echo "PR_NUMBER=${PR_NUMBER}" >> ./.env
              cat ./.env
              yarn build
              docker build -t ${IMAGE_PREFIX}:${IMAGE_TAG}-${adapter} .
              docker push ${IMAGE_PREFIX}:${IMAGE_TAG}-${adapter}
            done
          fi

      - name: Deploy k6
        env:
          PR_NUMBER: ${{ steps.findPr.outputs.pr }}
          ADAPTER_NAMES: ${{ steps.adapters-list.outputs.ADAPTERS_LIST }}
        run: |
          IMAGE_TAG=pr${PR_NUMBER}
          cd ./packages/k6
          if [ -n "$ADAPTER_NAMES" ]; then
            for adapter in ${ADAPTER_NAMES}; do
              helm upgrade k6-${PR_NUMBER}-${adapter} ./k8s \
                --install \
                --namespace adapters \
                --create-namespace \
                -f ./k8s/values.yaml \
                --set image.tag=${IMAGE_TAG}-${adapter} \
                --set name=k6-${PR_NUMBER}-${adapter} \
                --wait
            done
          fi
