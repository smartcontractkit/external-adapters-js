on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Release

env:
  cache-name: release-ci
  publicecr-name: z0b1w9r9

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}
      asset_prefix: ${{ steps.get_asset_prefix.outputs.prefix }}
    # TODO: only if tests pass (needs: [test])
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
      - name: Get asset prefix
        env:
          TAG_REF_NAME: ${{ github.ref }}
          REPOSITORY_NAME: ${{ github.repository }}
        id: get_asset_prefix
        shell: bash
        run: |
          # eg. github.repository = chainlink/ea, github.ref = release/v0.0.1 -> ea-v0.0.1
          echo ::set-output name=prefix::${REPOSITORY_NAME##*/}-${TAG_REF_NAME##*/v}

  # Read build strategy matrix of adapters, from a json file
  matrix-adapters:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.result }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/github-script@v3
        name: Create job matrix
        id: create-matrix
        with:
          script: |
            const script = require(`${process.env.GITHUB_WORKSPACE}/.github/scripts/matrix.js`)
            return script()

  publish-artifacts:
    needs: [release, matrix-adapters]
    runs-on: ubuntu-latest
    name: (${{ matrix.adapter.type }}) Publish ${{ matrix.adapter.name }} adapter zip and Docker image
    strategy:
      matrix: ${{fromJson(needs.matrix-adapters.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '12.x'
      - name: Install yarn deps
        run: yarn install --frozen-lockfile --production
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ~/.cache
            **/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Build
        run: ${{ matrix.adapter.cmd }}
      - name: Build Docker containers
        run: ${{ matrix.adapter.docker }} repo="public.ecr.aws/${{ env.publicecr-name }}/adapters/"
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.release_url }}
          asset_path: ${{ matrix.adapter.asset_path }}
          asset_name: ${{ needs.release.outputs.asset_prefix }}-${{ matrix.adapter.asset_name }}
          asset_content_type: application/zip
      - name: Configure AWS Credentials for Prod S3
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Upload to S3
        run: aws s3 cp ${{ matrix.adapter.asset_path }} s3://adaptor-source-cl/${{ matrix.adapter.asset_name }}
      - name: Configure AWS Credentials for SDLC Public ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PUBLICECR_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_PUBLICECR_SECRETKEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_PUBLICECR_ROLE_ARN }}
          role-duration-seconds: 1200
      - name: Authenticate to public ECR
        run: aws ecr-public get-login-password --region us-east-1  | docker login --username AWS --password-stdin public.ecr.aws/${{ env.publicecr-name }}
      - name: Create a public ECR repository if does not exist
        run: aws ecr-public create-repository --region us-east-1 --repository-name adapters/${{ matrix.adapter.image_name }} || true
      - name: Push to public ECR
        run: docker push public.ecr.aws/${{ env.publicecr-name }}/adapters/${{ matrix.adapter.image_name }}
