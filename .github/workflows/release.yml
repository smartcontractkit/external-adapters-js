on:
  push:
    branches:
      # On develop, we build and publish containers, with the tag of "develop-latest"

      # Ex. A newly build coingecko adapter is built and pushed to ECR.
      # The ECR registry is reachable at public.ecr.aws/chainlink/adapters/, or at the private registry

      # You would be able to pull the coingecko adapter with the following command:
      # docker pull public.ecr.aws/chainlink/adapters/coingecko-adapter:develop-latest
      - develop

      # On master, we build and publish containers with the tag of "latest" and another tag of the
      # adapters version contained within package.json.

      # Ex. If the value of the field "version" in the "package.json" file of the coingecko adapter is "0.0.5-beta",
      # The "coingecko-adapter" container will be resolvable with the following specifiers:
      # coingecko-adapter:latest
      # coingecko-adapter:0.0.5-beta

      # The ECR registry is reachable at public.ecr.aws/chainlink/adapters/

      # You would be able to pull the coingecko adapter with the following commands:
      # docker pull public.ecr.aws/chainlink/adapters/coingecko-adapter:latest
      # docker pull public.ecr.aws/chainlink/adapters/coingecko-adapter:0.0.5-beta
      - master
  # A workflow dispatch would trigger the same behaviour as a push to the master branch
  workflow_dispatch:

name: Release

env:
  publicecr-name: chainlink

jobs:
  matrix-adapters:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.result }}
    steps:
      - uses: actions/checkout@v2
      - name: Generate job matrix
        id: create-matrix
        uses: ./.github/actions/release/matrix-adapters
        with:
          branch: ${{ fromJSON('[undefined, "develop"]')[github.ref == 'refs/heads/develop'] }}
          latest: ${{ fromJSON('[undefined, true]')[github.ref == 'refs/heads/develop'] }}
          image-prefix: public.ecr.aws/${{ env.publicecr-name }}/adapters/

  publish-artifacts:
    needs: [matrix-adapters]
    runs-on: ubuntu-latest
    name: (${{ matrix.adapter.type }}) Publish ${{ matrix.adapter.name }} adapter Docker image
    strategy:
      matrix: ${{fromJson(needs.matrix-adapters.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials for SDLC Public ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PUBLICECR_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_PUBLICECR_SECRETKEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_PUBLICECR_ROLE_ARN }}
          role-duration-seconds: 1200
      - uses: ./.github/actions/release/publish-artifacts
        with:
          branch: ${{ fromJSON('[undefined, "develop"]')[github.ref == 'refs/heads/develop'] }}
          latest: ${{ fromJSON('[undefined, true]')[github.ref == 'refs/heads/develop'] }}
          image-prefix: public.ecr.aws/${{ env.publicecr-name }}/adapters/
          aws-region: us-east-1
          aws-ecr-cmd: ecr-public

  matrix-adapters-private:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.result }}
    steps:
      - uses: actions/checkout@v2
      - name: Generate job matrix
        id: create-matrix
        uses: ./.github/actions/release/matrix-adapters
        with:
          branch: ${{ fromJSON('[undefined, "develop"]')[github.ref == 'refs/heads/develop'] }}
          latest: ${{ fromJSON('[undefined, true]')[github.ref == 'refs/heads/develop'] }}
          image-prefix: ${{ secrets.STAGING_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/

  publish-artifacts-private:
    needs: [matrix-adapters-private]
    runs-on: ubuntu-latest
    name: (${{ matrix.adapter.type }}) Publish ${{ matrix.adapter.name }} adapter Docker image
    strategy:
      matrix: ${{fromJson(needs.matrix-adapters-private.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials for Staging Private ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PRIVATEECR_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_PRIVATEECR_SECRETKEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: ./.github/actions/release/publish-artifacts
        with:
          branch: ${{ fromJSON('[undefined, "develop"]')[github.ref == 'refs/heads/develop'] }}
          latest: ${{ fromJSON('[undefined, true]')[github.ref == 'refs/heads/develop'] }}
          image-prefix: ${{ secrets.STAGING_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/
          aws-region: ${{ secrets.AWS_REGION }}
          aws-ecr-cmd: ecr

  # Run the same steps as above, but this is to re-tag release images as latest
  # So released images have a latest tag on them too.
  # E.g. Releasing @chainlink/coingecko@0.0.3 will have the tag of 0.0.3 from the above jobs
  # and a tag of 'latest' from the below jobs.
  # This is only needed for non-develop jobs since the same image needs to be tagged twice
  matrix-adapters-release-latest:
    if: github.ref != 'refs/heads/develop'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.result }}
    steps:
      - uses: actions/checkout@v2
      - name: Generate job matrix
        id: create-matrix
        uses: ./.github/actions/release/matrix-adapters
        with:
          latest: true
          image-prefix: public.ecr.aws/${{ env.publicecr-name }}/adapters/

  publish-artifacts-release-latest:
    if: github.ref != 'refs/heads/develop'
    needs: [matrix-adapters-release-latest]
    runs-on: ubuntu-latest
    name: (${{ matrix.adapter.type }}) Publish ${{ matrix.adapter.name }} adapter Docker image
    strategy:
      matrix: ${{fromJson(needs.matrix-adapters-release-latest.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials for SDLC Public ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PUBLICECR_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_PUBLICECR_SECRETKEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_PUBLICECR_ROLE_ARN }}
          role-duration-seconds: 1200
      - uses: ./.github/actions/release/publish-artifacts
        with:
          latest: true
          image-prefix: public.ecr.aws/${{ env.publicecr-name }}/adapters/
          aws-region: us-east-1
          aws-ecr-cmd: ecr-public

  matrix-adapters-release-private-latest:
    if: github.ref != 'refs/heads/develop'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.result }}
    steps:
      - uses: actions/checkout@v2
      - name: Generate job matrix
        id: create-matrix
        uses: ./.github/actions/release/matrix-adapters
        with:
          latest: true
          image-prefix: ${{ secrets.STAGING_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/

  publish-artifacts-release-private-latest:
    if: github.ref != 'refs/heads/develop'
    needs: [matrix-adapters-release-private-latest]
    runs-on: ubuntu-latest
    name: (${{ matrix.adapter.type }}) Publish ${{ matrix.adapter.name }} adapter Docker image
    strategy:
      matrix: ${{fromJson(needs.matrix-adapters-release-latest.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials for Staging Private ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PRIVATEECR_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_PRIVATEECR_SECRETKEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: ./.github/actions/release/publish-artifacts
        with:
          latest: true
          image-prefix: ${{ secrets.STAGING_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          aws-region: ${{ secrets.AWS_REGION }}
          aws-ecr-cmd: ecr-public
