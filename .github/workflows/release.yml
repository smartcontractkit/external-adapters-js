name: Release

on:
  push:
    branches:
      - main
    # The only commits that will contain changes to the masterlist will be releases
    paths:
      - MASTERLIST.md
  workflow_dispatch:
    inputs:
      # For this workflow, build-all will cause all adapters to have their image pulled and republished to the public ECR
      # NOTE: If the images haven't been already published to the private ECR, this will fail; in that case run the deploy workflow first.
      build-all:
        description: whether to run steps for all adapters, regardless of whether they were changed in this event
        required: false
        default: 'false'

concurrency:
  group: deploy-and-release
  cancel-in-progress: false

jobs:
  calculate-changes:
    name: Compute changed adapters
    runs-on: [ubuntu-latest]
    env:
      BUILD_ALL: ${{ inputs.build-all }}
    outputs:
      adapter-list: ${{ steps.changed-adapters.outputs.CHANGED_ADAPTERS }}
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
          fetch-depth: 2
      - name: Set up and install dependencies
        uses: ./.github/actions/setup
        with:
          skip-setup: true
      - name: Build list of changed packages and changed adapters
        id: changed-adapters
        env:
          UPSTREAM_BRANCH: HEAD~1
        run: |
          ./.github/scripts/changed-adapters.sh

  create-ecr:
    name: Create ECR for ${{ matrix.adapter.shortName }}
    runs-on: ubuntu-latest
    needs: [calculate-changes]
    if: needs.calculate-changes.outputs.adapter-list != '[]'
    permissions: # These are needed for the configure-aws-credentials action
      id-token: write
      contents: read
    environment: release
    strategy:
      max-parallel: 20
      matrix: ${{fromJson(needs.calculate-changes.outputs.adapter-list)}}
    env:
      ECR_URL: public.ecr.aws/chainlink
      ECR_REPO: adapters/${{ matrix.adapter.shortName }}-adapter
      IMAGE_VERSION: ${{ matrix.adapter.version }}
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Create ECR for ${{ matrix.adapter.shortName }}
        uses: ./.github/actions/create-ecrs
        with:
          aws-ecr-url: ${{ env.ECR_URL }}
          aws-ecr-repo: ${{ env.ECR_REPO }}
          aws-region: us-east-1
          aws-role: ${{ secrets.AWS_OIDC_IAM_ROLE_ARN }}
          aws-ecr-private: false

  publish-adapter-images:
    name: Fetch and publish ${{ matrix.adapter.shortName }}
    runs-on: ubuntu-latest
    needs:
      - calculate-changes
    environment: release
    permissions: # These are needed for the configure-aws-credentials action
      id-token: write
      contents: read
    strategy:
      max-parallel: 20
      matrix: ${{fromJson(needs.calculate-changes.outputs.adapter-list)}}
    env:
      PUBLIC_ECR_URL: public.ecr.aws/chainlink
      PRIVATE_ECR_URL: ${{ secrets.SDLC_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION_ECR_PRIVATE }}.amazonaws.com
      ECR_REPO: adapters/${{ matrix.adapter.shortName }}-adapter
    steps:
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION_ECR_PRIVATE }}
          mask-aws-account-id: true
      - name: Copy images with attestations from private to public ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION_ECR_PRIVATE }}
          SOURCE_IMAGE: ${{ env.PRIVATE_ECR_URL }}/${{ env.ECR_REPO }}:${{ matrix.adapter.version }}
          DEST_IMAGE: ${{ env.PUBLIC_ECR_URL }}/${{ env.ECR_REPO }}:${{ matrix.adapter.version }}
        run: |
          PRIVATE_ECR_PASSWORD=$(aws ecr get-login-password --region "${AWS_REGION}")
          echo "::add-mask::${PRIVATE_ECR_PASSWORD}"
          PUBLIC_ECR_PASSWORD=$(aws ecr-public get-login-password --region us-east-1)
          echo "::add-mask::${PUBLIC_ECR_PASSWORD}"

          # Copy all architectures, attestations (SBOM, provenance), and signatures
          echo "Copying versioned image: ${SOURCE_IMAGE} -> ${DEST_IMAGE}"
          skopeo copy \
            --all \
            --preserve-digests \
            --retry-times 3 \
            --src-creds AWS:${PRIVATE_ECR_PASSWORD} \
            --dest-creds AWS:${PUBLIC_ECR_PASSWORD} \
            docker://${SOURCE_IMAGE} \
            docker://${DEST_IMAGE}

  gh-release:
    name: GH Release
    runs-on: ubuntu-latest
    needs:
      - publish-adapter-images
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    steps:
      - uses: actions/checkout@v5
      - name: Get release version
        id: get-version
        run: |
          echo "result=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT
      - name: Get release body
        run: |
          sha=$(git rev-parse HEAD)
          repo=$(gh repo view --json nameWithOwner -q .nameWithOwner)
          # Get the merged PR body to use in the GH release body
          gh api /repos/$repo/commits/$sha/pulls \
            --jq '(map(select(.merged_at != null)))
            | unique_by(.number)
            | "This release was merged in PR #" + (.[0].number | tostring) + "\n" + (.[0].body | split("\n\n\n# Releases") | .[1])' > pr_body.tmp
      - name: Create release
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # v2.2.1
        with:
          tag_name: v${{ steps.get-version.outputs.result }}
          name: Release v${{ steps.get-version.outputs.result }}
          body_path: pr_body.tmp
