on:
  push:
    branches:
      - develop
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Release

env:
  publicecr-name: z0b1w9r9

jobs:
  # Read build strategy matrix of adapters, from a json file
  matrix-adapters:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.result }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - name: Generate job matrix
        id: create-matrix
        run: yarn generate:gha:matrix
        env:
          BRANCH: ${{ fromJSON('["develop", undefined]')[github.ref == 'refs/heads/develop'] }}
          LATEST: ${{ fromJSON('[true, undefined]')[github.ref == 'refs/heads/develop'] }}
          IMAGE_PREFIX: public.ecr.aws/${{ env.publicecr-name }}/adapters/

  publish-artifacts:
    needs: [release, matrix-adapters]
    runs-on: ubuntu-latest
    name: (${{ matrix.adapter.type }}) Publish ${{ matrix.adapter.name }} adapter Docker image
    strategy:
      matrix: ${{fromJson(needs.matrix-adapters.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - name: Install yarn deps
        run: yarn
      - name: Generate docker-compose file
        run: yarn generate:docker-compose
        env:
          BRANCH: ${{ fromJSON('["develop", undefined]')[github.ref == 'refs/heads/develop'] }}
          LATEST: ${{ fromJSON('[true, undefined]')[github.ref == 'refs/heads/develop'] }}
          IMAGE_PREFIX: public.ecr.aws/${{ env.publicecr-name }}/adapters/
      - name: Build Docker containers
        run: docker-compose -f docker-compose.generated.yaml build ${{ matrix.adapter.name }}
      - name: Configure AWS Credentials for SDLC Public ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PUBLICECR_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_PUBLICECR_SECRETKEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_PUBLICECR_ROLE_ARN }}
          role-duration-seconds: 1200
      - name: Authenticate to public ECR
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/${{ env.publicecr-name }}
      - name: Create a public ECR repository if does not exist
        run: aws ecr-public create-repository --region us-east-1 --repository-name adapters/${{ matrix.adapter.name }} || true
      - name: Push to public ECR
        run: docker push ${{ matrix.adapter.image_name }}

  # Run the same steps as above, but this is to re-tag release images as latest
  # So released images have a latest tag on them too.
  # E.g. Releasing @chainlink/coingecko@0.0.3 will have the tag of 0.0.3 from the above jobs
  # and a tag of 'latest' from the below jobs.
  # This is only needed for non-develop jobs since the same image needs to be tagged twice
  matrix-adapters-release-latest:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.result }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - name: Generate job matrix
        id: create-matrix
        run: yarn generate:gha:matrix
        env:
          LATEST: true
          IMAGE_PREFIX: public.ecr.aws/${{ env.publicecr-name }}/adapters/

  publish-artifacts-release-latest:
    if: github.ref == 'refs/heads/develop'
    needs: [release, matrix-adapters]
    runs-on: ubuntu-latest
    name: (${{ matrix.adapter.type }}) Publish ${{ matrix.adapter.name }} adapter Docker image
    strategy:
      matrix: ${{fromJson(needs.matrix-adapters.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - name: Install yarn deps
        run: yarn
      - name: Generate docker-compose file
        run: yarn generate:docker-compose
        env:
          LATEST: true
          IMAGE_PREFIX: public.ecr.aws/${{ env.publicecr-name }}/adapters/
      - name: Build Docker containers
        run: docker-compose -f docker-compose.generated.yaml build ${{ matrix.adapter.name }}
      - name: Configure AWS Credentials for SDLC Public ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PUBLICECR_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.AWS_PUBLICECR_SECRETKEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_PUBLICECR_ROLE_ARN }}
          role-duration-seconds: 1200
      - name: Authenticate to public ECR
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/${{ env.publicecr-name }}
      - name: Create a public ECR repository if does not exist
        run: aws ecr-public create-repository --region us-east-1 --repository-name adapters/${{ matrix.adapter.name }} || true
      - name: Push to public ECR
        run: docker push ${{ matrix.adapter.image_name }}
