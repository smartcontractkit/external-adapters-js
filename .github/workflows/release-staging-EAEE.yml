name: Release Staging

on:
  push:
    branches:
      - epic/EAEE
  workflow_dispatch:
env:
  cache-name: staging-ci
  publicecr-name: chainlink-staging

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - name: Install dependencies
        run: yarn
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release

  # Read build strategy matrix of adapters, from a json file
  matrix-adapters:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.result }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - name: Generate job matrix
        id: create-matrix
        run: yarn generate:gha:matrix

  publish-artifacts:
    needs: [matrix-adapters]
    runs-on: ubuntu-latest
    name: (${{ matrix.adapter.type }}) Publish ${{ matrix.adapter.name }} Docker image
    strategy:
      matrix: ${{fromJson(needs.matrix-adapters.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14.x'
      - name: Install yarn deps
        run: yarn
      - name: Generate docker-compose file
        run: yarn generate:docker-compose
        env:
          TAG: EAEE
          IMAGE_PREFIX: public.ecr.aws/${{ env.publicecr-name }}/adapters/
      - name: Build Docker containers
        run: docker-compose -f docker-compose.generated.yaml build ${{ matrix.adapter.name }}
      - name: Configure staging AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_STAGING }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Authenticate to public ECR
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/${{ env.publicecr-name }}
      - name: Create a public ECR repository if does not exist
        run: aws ecr-public create-repository --region us-east-1 --repository-name adapters/${{ matrix.adapter.name }} || true
      - name: Push to public ECR
        run: docker push ${{ matrix.adapter.image_name }}
        env:
          TAG: EAEE
          IMAGE_PREFIX: public.ecr.aws/${{ env.publicecr-name }}/adapters/
