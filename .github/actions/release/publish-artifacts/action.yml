name: Release
description: Creates a release via building the required external adapters and publishing them. Must have aws credentials already configured
inputs:
  branch:
    description: The current branch this workflow is running from, to include in an image tag, omit if you do not want to have the branch included in the image tag.
    required: false
  latest:
    description: Set to "true" to create an image tag with the "latest" tag, "false" to use the external adapter's package.json version instead. Passing in "true" for the latest parameter overrides any version checking logic, as we typically only want to publish a new "latest"
    required: false
  image-prefix:
    description: 'Prefix to apply to docker images, in our case: typically an aws ECR registry'
    required: true
  adapter-name:
    description: 'The name of the adapter'
    required: true

  aws-region:
    description: The aws region to use
    required: true
  aws-ecr-private:
    description: If this action is being used to publish to private ecr
    required: true
  aws-ecr-account-ids:
    required: false
    description: A string of strings that specifies what accounts to allow pull access when "aws-ecr-private" is "true". A string that is composed of comma seperated, double quoted strings. E.g. "1","2","3".
outputs:
  image-exists:
    description: 'A boolean value that is true when an image already exists in ECR for the specified external adapter'
    value: ${{ steps.check-image-exists.outputs.image-exists }}

runs:
  using: 'composite'
  steps:
    - uses: actions/setup-node@v2
      with:
        node-version: '16.x'

    - name: Install yarn deps
      shell: bash
      run: yarn

    - name: Generate docker-compose file
      shell: bash
      run: yarn generate:docker-compose
      env:
        BRANCH: ${{ inputs.branch }}
        LATEST: ${{ inputs.latest }}
        IMAGE_PREFIX: ${{ inputs.image-prefix }}

    - name: Generate adapter image name
      shell: bash
      run: yarn generate:image-name
      id: generate-image-name
      env:
        BRANCH: ${{ inputs.branch }}
        LATEST: ${{ inputs.latest }}
        IMAGE_PREFIX: ${{ inputs.image-prefix }}
        ADAPTER_NAME: ${{ inputs.adapter-name }}

    - name: Check if image already exists on the public/private ECR repository
      id: check-image-exists
      # Disable default fast fail functionality since we care about exit code handling in the script itself
      shell: bash --noprofile --norc {0}
      env:
        ADAPTER_NAME: ${{ inputs.adapter-name }}
        AWS_REGION: ${{ inputs.aws-region }}
        AWS_ECR_PRIVATE: ${{ inputs.aws-ecr-private }}
        IMAGE_NAME: ${{ steps.generate-image-name.outputs.image_name }}
      run: .github/actions/release/publish-artifacts/image_exists

    - name: Build Docker containers
      # If we're publishing a latest image, we dont care if the tag already exists as we'll overwrite it.
      # We also know that latest images only get published when merging into master, preventing the issue
      # of images being spam published on every commit, a problem that was present when latest publishing was
      # active for merges to develop.

      # On versioned publishes, we should not be overwriting any tags, so we skip the entire publishing pipeline
      # if an image already exists with a semver tag.
      if: inputs.latest || steps.check-image-exists.outputs.image-exists == 'false'
      shell: bash
      run: docker-compose -f docker-compose.generated.yaml build ${{ inputs.adapter-name }}

    - name: Authenticate to ECR
      if: inputs.latest || steps.check-image-exists.outputs.image-exists == 'false'
      shell: bash
      run: aws ${{ fromJSON('["ecr-public", "ecr"]')[inputs.aws-ecr-private == 'true'] }} get-login-password --region ${{ inputs.aws-region }} | docker login --username AWS --password-stdin ${{ inputs.image-prefix }}

    - name: Create a ECR repository if does not exist
      if: inputs.latest || steps.check-image-exists.outputs.image-exists == 'false'
      shell: bash
      run: aws ${{ fromJSON('["ecr-public", "ecr"]')[inputs.aws-ecr-private == 'true'] }} create-repository --region ${{ inputs.aws-region }} --repository-name adapters/${{ inputs.adapter-name }} || true

    - name: Set ECR repository permissions for secondary account access on private ECR repos
      shell: bash
      if: inputs.aws-ecr-private == 'true' && (inputs.latest || steps.check-image-exists.outputs.image-exists == 'false')
      run: >
        aws ecr set-repository-policy
        --region ${{ inputs.aws-region }}
        --repository-name adapters/${{ inputs.adapter-name }}
        --policy-text "$(jq '.Statement[0].Principal.AWS |= [${{ inputs.aws-ecr-account-ids }}]' .github/actions/release/publish-artifacts/secondary-account-access-policy.json)" &> /dev/null;

    - name: Push to ECR
      if: inputs.latest || steps.check-image-exists.outputs.image-exists == 'false'
      shell: bash
      run: docker push ${{ steps.generate-image-name.outputs.image_name }}
